{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createMiddlewareSaga from 'redux-saga';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducers from './reducers';\nimport rootSagas from './sagas';\nimport { isServer } from '../isServer';\nconst sagaMiddleware = createMiddlewareSaga();\nlet middleware = applyMiddleware(sagaMiddleware);\n\nif (!isServer) {\n  middleware = applyMiddleware(sagaMiddleware, createLogger());\n}\n\nif (true) {\n  middleware = composeWithDevTools(applyMiddleware(sagaMiddleware, createLogger()));\n}\n\nconst store = createStore(rootReducers, middleware);\nsagaMiddleware.run(rootSagas);\nexport default store;","map":{"version":3,"sources":["/Users/dzb/Desktop/next-js-dzb/redux/store.js"],"names":["createStore","applyMiddleware","createMiddlewareSaga","createLogger","composeWithDevTools","rootReducers","rootSagas","isServer","sagaMiddleware","middleware","store","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,YAAP,MAAyB,YAAzB;AACA,OAAOC,SAAP,MAAsB,SAAtB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AACA,IAAIO,UAAU,GAAGR,eAAe,CAACO,cAAD,CAAhC;;AAEA,IAAI,CAACD,QAAL,EAAe;AACbE,EAAAA,UAAU,GAAGR,eAAe,CAACO,cAAD,EAAiBL,YAAY,EAA7B,CAA5B;AACD;;AAED,UAA2C;AACzCM,EAAAA,UAAU,GAAGL,mBAAmB,CAC9BH,eAAe,CAACO,cAAD,EAAiBL,YAAY,EAA7B,CADe,CAAhC;AAGD;;AAED,MAAMO,KAAK,GAAGV,WAAW,CAACK,YAAD,EAAeI,UAAf,CAAzB;AACAD,cAAc,CAACG,GAAf,CAAmBL,SAAnB;AAEA,eAAeI,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport createMiddlewareSaga from 'redux-saga';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducers from './reducers';\nimport rootSagas from './sagas';\nimport { isServer } from '../isServer';\n\nconst sagaMiddleware = createMiddlewareSaga();\nlet middleware = applyMiddleware(sagaMiddleware);\n\nif (!isServer) {\n  middleware = applyMiddleware(sagaMiddleware, createLogger());\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  middleware = composeWithDevTools(\n    applyMiddleware(sagaMiddleware, createLogger())\n  );\n}\n\nconst store = createStore(rootReducers, middleware);\nsagaMiddleware.run(rootSagas);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}