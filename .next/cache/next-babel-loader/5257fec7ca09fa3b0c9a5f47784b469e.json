{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(checkAuth),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchTestSaga);\n\nimport { takeLatest, put } from 'redux-saga/effects';\nimport authServices from 'services/authServices';\nimport types from '../types';\n\nfunction login(_ref) {\n  var username, password;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          username = _ref.username, password = _ref.password;\n          _context.prev = 1;\n\n          if (!(username === \"don\" && password === \"don\")) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 5;\n          return put({\n            type: types.LOGIN_SUCCESS\n          });\n\n        case 5:\n          authServices.saveInfoToStorage();\n          _context.next = 10;\n          break;\n\n        case 8:\n          _context.next = 10;\n          return put({\n            type: types.LOGIN_FAILED,\n            error: error\n          });\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 16;\n          return put({\n            type: types.LOGIN_FAILED,\n            error: _context.t0\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 12]]);\n}\n\nfunction checkAuth() {\n  var isLoggedStorage;\n  return _regeneratorRuntime.wrap(function checkAuth$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          isLoggedStorage = window.localStorage.getItem('isLogged') === \"true\";\n\n          if (!isLoggedStorage) {\n            _context2.next = 4;\n            break;\n          }\n\n          _context2.next = 4;\n          return put({\n            type: types.CHECK_LOCAL_STORAGE_SUCCESS\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          window.localStorage.clear();\n          _context3.next = 3;\n          return put({\n            type: types.LOGOUT_SUCCESS\n          });\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function watchTestSaga() {\n  return _regeneratorRuntime.wrap(function watchTestSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(types.LOGIN, login);\n\n        case 2:\n          _context4.next = 4;\n          return takeLatest(types.LOGOUT, logout);\n\n        case 4:\n          _context4.next = 6;\n          return takeLatest(types.CHECK_LOCAL_STORAGE, checkAuth);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/dzb/Desktop/next-js-dzb/redux/sagas/authSaga.js"],"names":["login","checkAuth","logout","watchTestSaga","takeLatest","put","authServices","types","username","password","type","LOGIN_SUCCESS","saveInfoToStorage","LOGIN_FAILED","error","isLoggedStorage","window","localStorage","getItem","CHECK_LOCAL_STORAGE_SUCCESS","clear","LOGOUT_SUCCESS","LOGIN","LOGOUT","CHECK_LOCAL_STORAGE"],"mappings":";;oDAIUA,K;qDAaAC,S;qDAOAC,M;qDAKeC,a;;AA7BzB,SAASC,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,SAAUP,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBQ,UAAAA,QAAlB,QAAkBA,QAAlB,EAA4BC,QAA5B,QAA4BA,QAA5B;AAAA;;AAAA,gBAEQD,QAAQ,KAAK,KAAb,IAAsBC,QAAQ,KAAK,KAF3C;AAAA;AAAA;AAAA;;AAAA;AAGM,iBAAMJ,GAAG,CAAC;AAAEK,YAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd,WAAD,CAAT;;AAHN;AAIML,UAAAA,YAAY,CAACM,iBAAb;AAJN;AAAA;;AAAA;AAAA;AAMM,iBAAMP,GAAG,CAAC;AAAEK,YAAAA,IAAI,EAAEH,KAAK,CAACM,YAAd;AAA4BC,YAAAA,KAAK,EAALA;AAA5B,WAAD,CAAT;;AANN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMT,GAAG,CAAC;AAAEK,YAAAA,IAAI,EAAEH,KAAK,CAACM,YAAd;AAA4BC,YAAAA,KAAK;AAAjC,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUb,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACQc,UAAAA,eADR,GAC0BC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,MAA4C,MADtE;;AAAA,eAEMH,eAFN;AAAA;AAAA;AAAA;;AAAA;AAGI,iBAAMV,GAAG,CAAC;AAAEK,YAAAA,IAAI,EAAEH,KAAK,CAACY;AAAd,WAAD,CAAT;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAUjB,MAAV;AAAA;AAAA;AAAA;AAAA;AACEc,UAAAA,MAAM,CAACC,YAAP,CAAoBG,KAApB;AADF;AAEE,iBAAMf,GAAG,CAAC;AAAEK,YAAAA,IAAI,EAAEH,KAAK,CAACc;AAAd,WAAD,CAAT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUlB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,UAAU,CAACG,KAAK,CAACe,KAAP,EAActB,KAAd,CAAhB;;AADa;AAAA;AAEb,iBAAMI,UAAU,CAACG,KAAK,CAACgB,MAAP,EAAerB,MAAf,CAAhB;;AAFa;AAAA;AAGb,iBAAME,UAAU,CAACG,KAAK,CAACiB,mBAAP,EAA4BvB,SAA5B,CAAhB;;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, put } from 'redux-saga/effects';\nimport authServices from 'services/authServices';\nimport types from '../types';\n\nfunction* login({ username, password }) {\n  try {\n    if (username === \"don\" && password === \"don\") {\n      yield put({ type: types.LOGIN_SUCCESS });\n      authServices.saveInfoToStorage();\n    } else {\n      yield put({ type: types.LOGIN_FAILED, error });  \n    }\n  } catch (error) {\n    yield put({ type: types.LOGIN_FAILED, error });\n  }\n}\n\nfunction* checkAuth() {\n  const isLoggedStorage = window.localStorage.getItem('isLogged') === \"true\";\n  if (isLoggedStorage) {\n    yield put({ type: types.CHECK_LOCAL_STORAGE_SUCCESS });\n  }\n}\n\nfunction* logout() {\n  window.localStorage.clear();\n  yield put({ type: types.LOGOUT_SUCCESS }); \n}\n\nexport default function* watchTestSaga() {\n  yield takeLatest(types.LOGIN, login);\n  yield takeLatest(types.LOGOUT, logout);\n  yield takeLatest(types.CHECK_LOCAL_STORAGE, checkAuth);\n}"]},"metadata":{},"sourceType":"module"}