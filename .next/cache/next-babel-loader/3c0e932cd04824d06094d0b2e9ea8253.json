{"ast":null,"code":"import { takeLatest, put } from 'redux-saga/effects';\nimport authServices from 'services/authServices';\nimport types from '../types';\n\nfunction* login({\n  username,\n  password\n}) {\n  try {\n    if (username === \"don\" && password === \"don\") {\n      yield put({\n        type: types.LOGIN_SUCCESS\n      });\n      authServices.saveInfoToStorage();\n    } else {\n      yield put({\n        type: types.LOGIN_FAILED,\n        error\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: types.LOGIN_FAILED,\n      error\n    });\n  }\n}\n\nfunction* checkAuth() {\n  const isLoggedStorage = window.localStorage.getItem('isLogged') === \"true\";\n\n  if (isLoggedStorage) {\n    yield put({\n      type: types.CHECK_LOCAL_STORAGE_SUCCESS\n    });\n  }\n}\n\nfunction* logout() {\n  window.localStorage.clear();\n  yield put({\n    type: types.LOGOUT_SUCCESS\n  });\n}\n\nexport default function* watchTestSaga() {\n  yield takeLatest(types.LOGIN, login);\n  yield takeLatest(types.LOGOUT, logout);\n  yield takeLatest(types.CHECK_LOCAL_STORAGE, checkAuth);\n}","map":{"version":3,"sources":["/Users/dzb/Desktop/next-js-dzb/redux/sagas/authSaga.js"],"names":["takeLatest","put","authServices","types","login","username","password","type","LOGIN_SUCCESS","saveInfoToStorage","LOGIN_FAILED","error","checkAuth","isLoggedStorage","window","localStorage","getItem","CHECK_LOCAL_STORAGE_SUCCESS","logout","clear","LOGOUT_SUCCESS","watchTestSaga","LOGIN","LOGOUT","CHECK_LOCAL_STORAGE"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,UAAUC,KAAV,CAAgB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAhB,EAAwC;AACtC,MAAI;AACF,QAAID,QAAQ,KAAK,KAAb,IAAsBC,QAAQ,KAAK,KAAvC,EAA8C;AAC5C,YAAML,GAAG,CAAC;AAAEM,QAAAA,IAAI,EAAEJ,KAAK,CAACK;AAAd,OAAD,CAAT;AACAN,MAAAA,YAAY,CAACO,iBAAb;AACD,KAHD,MAGO;AACL,YAAMR,GAAG,CAAC;AAAEM,QAAAA,IAAI,EAAEJ,KAAK,CAACO,YAAd;AAA4BC,QAAAA;AAA5B,OAAD,CAAT;AACD;AACF,GAPD,CAOE,OAAOA,KAAP,EAAc;AACd,UAAMV,GAAG,CAAC;AAAEM,MAAAA,IAAI,EAAEJ,KAAK,CAACO,YAAd;AAA4BC,MAAAA;AAA5B,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,SAAV,GAAsB;AACpB,QAAMC,eAAe,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,MAA4C,MAApE;;AACA,MAAIH,eAAJ,EAAqB;AACnB,UAAMZ,GAAG,CAAC;AAAEM,MAAAA,IAAI,EAAEJ,KAAK,CAACc;AAAd,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,MAAV,GAAmB;AACjBJ,EAAAA,MAAM,CAACC,YAAP,CAAoBI,KAApB;AACA,QAAMlB,GAAG,CAAC;AAAEM,IAAAA,IAAI,EAAEJ,KAAK,CAACiB;AAAd,GAAD,CAAT;AACD;;AAED,eAAe,UAAUC,aAAV,GAA0B;AACvC,QAAMrB,UAAU,CAACG,KAAK,CAACmB,KAAP,EAAclB,KAAd,CAAhB;AACA,QAAMJ,UAAU,CAACG,KAAK,CAACoB,MAAP,EAAeL,MAAf,CAAhB;AACA,QAAMlB,UAAU,CAACG,KAAK,CAACqB,mBAAP,EAA4BZ,SAA5B,CAAhB;AACD","sourcesContent":["import { takeLatest, put } from 'redux-saga/effects';\nimport authServices from 'services/authServices';\nimport types from '../types';\n\nfunction* login({ username, password }) {\n  try {\n    if (username === \"don\" && password === \"don\") {\n      yield put({ type: types.LOGIN_SUCCESS });\n      authServices.saveInfoToStorage();\n    } else {\n      yield put({ type: types.LOGIN_FAILED, error });  \n    }\n  } catch (error) {\n    yield put({ type: types.LOGIN_FAILED, error });\n  }\n}\n\nfunction* checkAuth() {\n  const isLoggedStorage = window.localStorage.getItem('isLogged') === \"true\";\n  if (isLoggedStorage) {\n    yield put({ type: types.CHECK_LOCAL_STORAGE_SUCCESS });\n  }\n}\n\nfunction* logout() {\n  window.localStorage.clear();\n  yield put({ type: types.LOGOUT_SUCCESS }); \n}\n\nexport default function* watchTestSaga() {\n  yield takeLatest(types.LOGIN, login);\n  yield takeLatest(types.LOGOUT, logout);\n  yield takeLatest(types.CHECK_LOCAL_STORAGE, checkAuth);\n}"]},"metadata":{},"sourceType":"module"}