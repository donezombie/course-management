{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(testRequest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watcherSaga);\n\nimport { takeLatest, put } from 'redux-saga/effects';\nimport types from '../types';\nimport Services from '../../services';\nimport { TODOS_URL } from '../../constants/api';\n\nfunction testRequest() {\n  var response;\n  return _regeneratorRuntime.wrap(function testRequest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return Services.get(TODOS_URL);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put({\n            type: types.TEST_REQUEST_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: types.TEST_REQUEST_FAILED,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nexport default function watcherSaga() {\n  return _regeneratorRuntime.wrap(function watcherSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(types.TEST_REQUEST, testRequest);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/dzb/Desktop/next-js-dzb/redux/sagas/testSagas.js"],"names":["testRequest","watcherSaga","takeLatest","put","types","Services","TODOS_URL","get","response","type","TEST_REQUEST_SUCCESS","data","TEST_REQUEST_FAILED","error","TEST_REQUEST"],"mappings":";;oDAMUA,W;qDASeC,W;;AAfzB,SAASC,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AAGA,SAAUN,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqB,iBAAMK,QAAQ,CAACE,GAAT,CAAaD,SAAb,CAAN;;AAFrB;AAEUE,UAAAA,QAFV;AAAA;AAGI,iBAAML,GAAG,CAAC;AAAEM,YAAAA,IAAI,EAAEL,KAAK,CAACM,oBAAd;AAAoCC,YAAAA,IAAI,EAAEH,QAAQ,CAACG;AAAnD,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMR,GAAG,CAAC;AAAEM,YAAAA,IAAI,EAAEL,KAAK,CAACQ,mBAAd;AAAmCC,YAAAA,KAAK;AAAxC,WAAD,CAAT;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,eAAe,SAAUZ,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,UAAU,CAACE,KAAK,CAACU,YAAP,EAAqBd,WAArB,CAAhB;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, put } from 'redux-saga/effects';\nimport types from '../types';\nimport Services from '../../services';\nimport { TODOS_URL } from '../../constants/api';\n\n\nfunction* testRequest() {\n  try {\n    const response = yield Services.get(TODOS_URL);\n    yield put({ type: types.TEST_REQUEST_SUCCESS, data: response.data });\n  } catch (error) {\n    yield put({ type: types.TEST_REQUEST_FAILED, error });\n  }\n}\n\nexport default function* watcherSaga() {\n  yield takeLatest(types.TEST_REQUEST, testRequest)\n}"]},"metadata":{},"sourceType":"module"}